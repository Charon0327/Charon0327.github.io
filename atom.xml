<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Charon0327.github.io</id>
    <title>Gridea</title>
    <updated>2021-02-19T04:18:24.313Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Charon0327.github.io"/>
    <link rel="self" href="https://Charon0327.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Charon0327.github.io/images/avatar.png</logo>
    <icon>https://Charon0327.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[CSS-opacity属性]]></title>
        <id>https://Charon0327.github.io/post/css-opacity-shu-xing/</id>
        <link href="https://Charon0327.github.io/post/css-opacity-shu-xing/">
        </link>
        <updated>2021-02-19T04:08:36.000Z</updated>
        <content type="html"><![CDATA[<p>一个css3属性,该属性用于设置元素的不透明度级别，所有的浏览器都支持这个属性。<br>
语法: <code>opacity:value|inherit;</code><br>
参数说明:<br>
    ➢value:规定不透明度。从0.0(完全透明)到1.0(完全不透明)。<br>
    ➢inherit :应该从父元素继承opacity属性的值。<br>
IE8以及更早的版本使用滤镜filter:alpha(opacity=x)。x能够取的值从0到100。值<br>
越小，越透明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浏览器兼容CSS hack]]></title>
        <id>https://Charon0327.github.io/post/liu-lan-qi-jian-rong-css-hack/</id>
        <link href="https://Charon0327.github.io/post/liu-lan-qi-jian-rong-css-hack/">
        </link>
        <updated>2021-02-19T02:41:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="css-hack分类">CSS hack分类</h3>
<p>CSS Hack大致有3种表现形式，CSS属性前缀法、选择器前缀法以及条件注释法(即HTML头部引用if IE ) Hack，实际项目中CSS Hack大部分是针对IE浏览器不同版本之间的表现差异而引入的。<br>
      属性前缀法(即类内部Hack):例如IE6能识别下划线&quot;_&quot;和星号&quot;*&quot;，IE7能识别星号&quot;*&quot;，但不能识别下划线&quot;_&quot;，IE6~IE10都认识&quot;\9&quot;，但firefox前述三个都不能认识。<br>
      选择器前缀法(即选择器Hack):例如IE6能识别*html .class{}, IE7能识别*+html .class{}或者* :first-child+html .class{}。<br>
      IE条件注释法(即HTML条件注释Hack):针对所有IE(注: IE10+已经 不再支持条件注释): &lt;!- -[if IE]&gt;IE浏览器显示的内容&lt; ![endif]--&gt;,针对IE6及以下版不: &lt;!- -[if It IE 6]&gt;只在IE6-显示的内容&lt;![endif]--&gt;. 这类Hack不仅对CSS生效， 对写在判断语句里面的所有代码都会生效。</p>
<ol>
<li>CSS hack方式一：条件注释法：<br>
这种方式是IE浏览器转有的Hack方式。
<ul>
<li>只在IE下生效</li>
</ul>
<pre><code>&lt;!--[if IE]&gt;
	这段文字只在IE浏览器中显示
&lt;![endif]--&gt;
</code></pre>
<ul>
<li>只在IE6下生效</li>
</ul>
<pre><code>&lt;!--[if IE 6]&gt;
	这段文字只在IE6浏览器中显示
&lt;![endif]--&gt;
</code></pre>
<ul>
<li>只在IE6以上版本生效</li>
</ul>
<pre><code>&lt;!--[if gte IE 6]&gt;
	这段文字只在IE6以上(包括)版本浏览器中显示
&lt;![endif]--&gt;
</code></pre>
<ul>
<li>只在IE8上不生效</li>
</ul>
<pre><code>&lt;!--[if ！IE 8]&gt;
	这段文字在非IE8浏览器中显示
&lt;![endif]--&gt;
</code></pre>
<ul>
<li>非IE浏览器生效</li>
</ul>
<pre><code>&lt;!--[if ！IE]&gt;
	这段文字在非IE浏览器中显示
&lt;![endif]--&gt;
</code></pre>
</li>
<li>CSS hack方式二:类内属性前缀法<br>
属性前缀法是在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀，以达到预期的页面展现效果。
<ul>
<li>&quot;\9”IE6/IE7/IE8/IE9/IE10都生效<br>
<code>background-color: red\9;</code></li>
<li>&quot;\0”IE8/IE9/IE10都生效，是IE8/9/ 10的hack</li>
<li>&quot;\9\0&quot; 只对IE9/IE10生效，是IE9/10的hack</li>
<li>“减号是IE6专有的hack</li>
<li>+ IE7识别的hack方法</li>
</ul>
</li>
<li>CSS hack方式三:选择器前缀法<br>
选择器前缀法是针对一些页面表现不一致或者 需要特殊对待的浏览器,在CSS选择器前<br>
加上一些只有某些特定浏览器才能识别的前缀进行hack。<br>
   * + html *+前缀只对E7生效
<ul>
<li>@media screen\9{...}只对IE6/7生效</li>
<li>@media \Oscreen {body { background: red; }}只对IE8有效</li>
<li>@media \Oscreen,screen\9{body { background: blue; }只对IE6/7/8有效</li>
<li>@media screen\0 {body { background: green; }}只对IE8/9/10有效</li>
<li>@media screen and (min-width:0\0) {body { background: gray; }}只对IE9/10有效</li>
<li>@media screen and (-ms-high-contrast: active), (-ms-high contrast: none) {body { background: orange; }}只对E10有效</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS定位]]></title>
        <id>https://Charon0327.github.io/post/css-ding-wei/</id>
        <link href="https://Charon0327.github.io/post/css-ding-wei/">
        </link>
        <updated>2021-02-18T03:12:01.000Z</updated>
        <content type="html"><![CDATA[<p>CSS有三种基本的定位机制：普通流，浮动和绝对定位。</p>
<h3 id="css定位position属性实现定位">CSS定位/position属性实现定位</h3>
<p>通过使用position属性，可以选择四种不同类型的定位，这会影响元素框生成的方式。<br>
    position：static  静止定位，元素默认状态<br>
    position：absolute  绝对定位，相对于最近的有定位的父元素进行定位<br>
    position：relative  相对定位，相对于自己原来位置进行定位<br>
    position：fixed  固定定位，相对于浏览器可视窗口进行定位</p>
<h5 id="position-absolute">position-absolute</h5>
<p>元素相对于最近的，有定位的父级元素定位，如果其父级元素都无定位属性,则相对于body定位。元素脱离文档流(从文档流中删除) , 原本所占空间不保留。元素定位后生成一个行内块级盒子。绝对定位的框可以从它的包含块向上、右、下、 左移动。绝对定位的框脱离普通流，所以它可以覆盖页面上的其他元素，可以通过设置Z-index属性来控制这些框的堆放次序。</p>
<h5 id="position-relative">position-relative</h5>
<p>相对定位被看作普通流定位模型的一部分，定位元素的位置相对于它在普通流中的位置进行移动。使用相对定位的元素不管它是否进行移动，元素仍要占据它原来的位置。移动元素会导致它覆盖其他的框。</p>
<h5 id="position-fixed">position-fixed</h5>
<p>固定定位相对于浏览器可视窗口进行定位，其他表现类似于absolute绝对定位表现。</p>
<h3 id="css定位z-index">CSS定位/z-index</h3>
<p>z-index属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。<br>
    相同的定位元素，结构后面的元素在重叠的情况下会默认覆盖结构之前的定位元素。<br>
    元素可拥有负的z-index属性值。<br>
    Z-index 仅能在定位元素上奏效(例如position:absolute/fixed/relative; 通过调节z-index值的大小来改变)</p>
<h3 id="css定位元素垂直居中">CSS定位/元素垂直居中</h3>
<p>利用position定位可实现元素的垂直居中<br>
    父元素需要有定位( poisition:absolute/relative/fixed );<br>
    垂直居中元素进行绝对定位position : absolute<br>
    top:50%; left:50%; margin-left: 元素宽度margin-top: -元素宽度;</p>
<h3 id="css溢出overflow">CSS溢出overflow</h3>
<p>当一个元素固定为某个特定大小，但内容在元素中放不下F。此时就可以利用overflow属性米控制这种情况<br>
    值: visible | hidden | scroll | auto I inherit<br>
    初始值; vislble<br>
    应用于:块级元素，特换元素，表单元格<br>
overflow-x主要用来定义对水平方向内容溢出的剪切，而overflow-y主要用来定义对垂直方向内容溢出的剪切。<br>
注意如果:overflow-x和overflow-y相同则等同于overflow，如果overflow-x和overflow-y值不同，且其中一个值显式设置为visible或末设置默认为visible ，而另外一个值是非visible的值，则visible 会被重置为auto。</p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">visible</td>
<td style="text-align:center">元素的内容在元素框之外也可见</td>
</tr>
<tr>
<td style="text-align:center">auto</td>
<td style="text-align:center">如果内容被裁减，则浏览器会显示滚动条以便查看其余的内容</td>
</tr>
<tr>
<td style="text-align:center">scroll</td>
<td style="text-align:center">元素的内容会在元素框的边界处裁减，但浏览器会显示滚动条以便查看其余的内容</td>
</tr>
<tr>
<td style="text-align:center">hidden</td>
<td style="text-align:center">元素的内容会在元素框的边界处裁减，并且超出裁减区域的内容不可见</td>
</tr>
</tbody>
</table>
<h4 id="css-文本溢出省略号代替单行文本">CSS -文本溢出省略号代替(单行文本)</h4>
<p>overflow : hidden; //超出隐藏<br>
text- oveflellisis // 文本超出省略号代替<br>
white-space:nowrap; // 禁止文字自动换行</p>
<h3 id="css-margin产生问题">CSS -margin产生问题</h3>
<p>垂直方向auto值失效( 定位实现垂直居中)<br>
父元素设置margin- top时,内部的第一个子元素margin-top失效( padding代替,为父元素加边框)<br>
上下双边距合并(统一设置垂直边距)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS盒子模型]]></title>
        <id>https://Charon0327.github.io/post/css-he-mo-xing-jie-xi-fu-dong/</id>
        <link href="https://Charon0327.github.io/post/css-he-mo-xing-jie-xi-fu-dong/">
        </link>
        <updated>2021-01-26T09:53:22.000Z</updated>
        <content type="html"><![CDATA[<p>CSS盒模型规定了处理元素的内容、内边距、边框和外边距的方式。<br>
一切皆为盒子，div，h1，或p元素常常被称为块级元素，意味着这些元素盒子显示为块盒子，span和input等元素称为“行内元素”。</p>
<h3 id="块级元素与行内元素区别">块级元素与行内元素区别</h3>
<p>1.块级元素可设置宽高，行内元素宽高由元素内容决定。<br>
2.块级元素可设置垂直方向的内外边距，行内元素无法设置垂直的内外边距。<br>
3.块级元素默认显示方式占满整行，相邻的行内元素默认在同一行显示。<br>
4.通过display属性值进行元素显示方式的更改。</p>
<h3 id="盒子类型的相互转换">盒子类型的相互转换</h3>
<p>块级盒子与行内盒子之间通过display值可进行相互的盒子显示方式转换</p>
<h5 id="常用的display值">常用的display值</h5>
<p>块级盒子默认 display:block; 转换操作 display:inline-block; display:inline;<br>
行内盒子默认 display:inline; 转换操作 display:inline-block; display:block;<br>
行内块盒子默认  display:inline-block;  转换操作 display:block;  display:inline;<br>
<strong>内外边距</strong><br>
padding属性规定了盒子的内边距<br>
border属性规定了盒子的边框<br>
margin属性规定了盒子的外边距</p>
<h3 id="内边距padding">内边距padding</h3>
<p>padding属性接受长度值或百分比值，但不允许使用负值。<br>
两个值时：上下 左右<br>
三个值：上 左右 下</p>
<h3 id="边框border">边框border</h3>
<p>元素的边框是围绕元素内容和边距的一条或多条线。border允许规定元素边框的样式，宽度和颜色。</p>
<h5 id="border-style边框样式">border-style边框样式</h5>
<p>常用属性：dotted, dahed,solid,double<br>
单独属性方式：<br>
    border-top-style<br>
    border-right-style<br>
    border-bottom-style<br>
    border-left-style</p>
<h5 id="border-width">border-width</h5>
<p>border-width规定了边框的宽度</p>
<h5 id="border-color">border-color</h5>
<p>边框颜色透明：border-color:transparent；<br>
border:1px solid #eee;</p>
<h3 id="外边距margin">外边距margin</h3>
<p>margin属性接受任何长度单位，百分值，甚至负值。<br>
有固定的的宽度块元素的水平居中，可以使用margin：*px auto的方式。</p>
<h2 id="css浮动">CSS浮动</h2>
<p>浮动元素取值：float:left/rigt/none<br>
浮动元素适用于任何元素（行内元素，块元素）<br>
浮动元素会默认水平排列，如果超出父元素的默认宽度，会自动跳转到下一行。<br>
浮动元素会脱离文档流，显示方式为仅靠近父元素的左边缘，或者之前有浮动的元素的边缘位置<br>
浮动的元素直接的父元素在 没有设置高度的情况下高度会丢失。</p>
<h3 id="css清除浮动方法">CSS清除浮动方法</h3>
<p>1.空标签清除浮动<br>
   &lt; div style=&quot;clear:both;&quot;&gt;&lt; /div&gt;<br>
2.利用伪类元素清除浮动<br>
  after{ content:&quot;&quot;; display:block; clear:both}<br>
3.触发父级元素BFC模式进行浮动的清除 overflow:hidden;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS基础]]></title>
        <id>https://Charon0327.github.io/post/css-ji-chu/</id>
        <link href="https://Charon0327.github.io/post/css-ji-chu/">
        </link>
        <updated>2021-01-25T11:10:12.000Z</updated>
        <content type="html"><![CDATA[<p>外部导入：@import（不推荐）<br>
外部样式表：<br>
&lt; head&gt;&lt; link css/demo.css&gt;&lt; /head&gt;<br>
内部样式表：<br>
&lt; head&gt;&lt; style&gt;css样式&lt; /style&gt;&lt; /head&gt;<br>
内联样式表：<br>
&lt; div style=&quot;background-color:red&quot;&gt;&lt; /div&gt;<br>
CSS由两个主要的部分构成：选择器，以及一条或多条声明<br>
每条声明由一个属性和一个值组成<br>
<strong>优先级</strong><br>
!important&gt;行内&gt;id&gt;类选择器&gt;标签选择器<br>
<strong>常用选择器种类</strong><br>
id选择器<br>
类选择器<br>
标签选择器<br>
后代选择器<br>
子元素选择器<br>
分组选择器<br>
相邻兄弟选择器<br>
伪类<br>
伪元素<br>
通用选择器<br>
<strong>## CSS文本属性</strong><br>
CSS文本属性课定义文本的外观，通过文本属性，可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进等。</p>
<h3 id="文本颜色color">文本颜色color</h3>
<p>            设置文本颜色<br>
           color_name规定颜色值为颜色名称的颜色（如red）<br>
          hex_number 规定颜色值为十六进制的颜色<br>
          rgb_number规定颜色值为rgb的颜色（如rgb(255,0,0））</p>
<h3 id="行间距line-height">行间距line-height</h3>
<p>           设置行间距离<br>
           不允许使用负值<br>
          单行文字可实现元素的垂直居中<br>
          默认继承父元素line-height</p>
<h3 id="文本缩进text-indent">文本缩进text-indent</h3>
<p>所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。<br>
可以为所有块级元素应用text-indent，但无法将该属性应用于行内元素。<br>
使用负值<br>
使用百分比<br>
text-indent属性可以继承</p>
<h3 id="文本对齐text-align">文本对齐text-align</h3>
<p>它会影响一个元素中的文本行互相之间的对齐方式<br>
值left、right和center会导致元素中的文本分别左对齐、右对齐和居中。</p>
<h3 id="文本修饰text-decoration">文本修饰text-decoration</h3>
<p>主要设定文本划线的属性</p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">none</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">underline</td>
<td style="text-align:center">下划线</td>
</tr>
<tr>
<td style="text-align:center">overline</td>
<td style="text-align:center">上划线</td>
</tr>
<tr>
<td style="text-align:center">line-through</td>
<td style="text-align:center">当中下划线</td>
</tr>
</tbody>
</table>
<h3 id="字间隔word-spacing">字间隔word-spacing</h3>
<p>可以改变字（单词）之间的标准间隔，默认值normal与设置值为0是一样的<br>
属性接受一个正长度值或负长度值。如果提供一个正长度值，字之间的间隔会增加。为word-spacing设置一个负值，会把它拉近。</p>
<h3 id="字母间隔letter-spacing">字母间隔letter-spacing</h3>
<p>字母间隔修改的是字符或字母之间的间隔<br>
letter-spacing属性的可取值包括所有长度。默认关键字为normal</p>
<h3 id="字符转换text-transform">字符转换text-transform</h3>
<p>用于处理文本大小写</p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">none</td>
<td style="text-align:center">文本正常显示</td>
</tr>
<tr>
<td style="text-align:center">uppercase</td>
<td style="text-align:center">文本全部转换为大写</td>
</tr>
<tr>
<td style="text-align:center">lowercase</td>
<td style="text-align:center">文本全部转换为小写</td>
</tr>
<tr>
<td style="text-align:center">capitalize</td>
<td style="text-align:center">首字母大写</td>
</tr>
</tbody>
</table>
<h3 id="处理空白符white-space">处理空白符white-space</h3>
<p>清除源文档中的字符空格，包括换行<br>
默认属性值：normal<br>
禁止换行：nowrap</p>
<h2 id="css字体属性"><strong>CSS字体属性</strong></h2>
<h4 id="字体变形font-variant">字体变形font-variant</h4>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">normal</td>
<td style="text-align:center">默认值。标准字体</td>
</tr>
<tr>
<td style="text-align:center">small-caps</td>
<td style="text-align:center">浏览器会显示小型大写字母的字体</td>
</tr>
<tr>
<td style="text-align:center">inherit</td>
<td style="text-align:center">规定应该从父元素继承font-variant属性的值</td>
</tr>
</tbody>
</table>
<h3 id="字体风格font-style">字体风格font-style</h3>
<p>最常用于规定斜体文本</p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">normal</td>
<td style="text-align:center">文本正常显示</td>
</tr>
<tr>
<td style="text-align:center">italic</td>
<td style="text-align:center">文本斜体显示</td>
</tr>
<tr>
<td style="text-align:center">oblique</td>
<td style="text-align:center">文本倾斜显示</td>
</tr>
</tbody>
</table>
<h3 id="指定字体font-family">指定字体font-family</h3>
<p>定义文本的字体系列</p>
<h3 id="字体加粗font-weight">字体加粗font-weight</h3>
<p>使用bold将文本字体加粗<br>
关键字100~900为字体指定了9级加粗度，数字400等价于normal，700等价于bold</p>
<h2 id="css-链接">CSS 链接</h2>
<p>链接的四种状态</p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a:link</td>
<td style="text-align:center">普通的、未被访问的链接</td>
</tr>
<tr>
<td style="text-align:center">a:visited</td>
<td style="text-align:center">用户已访问的链接</td>
</tr>
<tr>
<td style="text-align:center">a:hover</td>
<td style="text-align:center">鼠标指针位于链接的上方</td>
</tr>
<tr>
<td style="text-align:center">a:active</td>
<td style="text-align:center">链接被点击的时刻</td>
</tr>
</tbody>
</table>
<p>为链接的不同状态设置样式时，按照以下次序规则：<br>
a:hover必须位于a:link和a:visited之后<br>
a:active必须位于a:hover之后</p>
<h2 id="css列表">CSS列表</h2>
<p>要修改列表项的标志类型，可以使用属性list-style-type:</p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">square</td>
<td style="text-align:center">以方形的形式显示</td>
</tr>
<tr>
<td style="text-align:center">circle</td>
<td style="text-align:center">以圆圈的形式显示</td>
</tr>
<tr>
<td style="text-align:center">upper-roman</td>
<td style="text-align:center">大写罗马数字</td>
</tr>
<tr>
<td style="text-align:center">lower-alpha</td>
<td style="text-align:center">小写英文字母</td>
</tr>
</tbody>
</table>
<h2 id="css表格">CSS表格</h2>
<p>表格边框：border属性<br>
折叠边框：border-collapse<br>
表格宽度高度：width/height<br>
表格文本对齐：text-align/vertical-align</p>
<h2 id="css背景">CSS背景</h2>
<p>background-color<br>
background-image无法实现继承<br>
background-image （no-repeat/repeat-x/repeat-y）在页面上对背景图像进行平铺<br>
background-position设置背景图像的起始位置<br>
background-attachment声明图像相对于可视区是固定的(fixed)，不会受到滚动的影响</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML基础-表单/表格]]></title>
        <id>https://Charon0327.github.io/post/html-ji-chu-biao-dan-biao-ge/</id>
        <link href="https://Charon0327.github.io/post/html-ji-chu-biao-dan-biao-ge/">
        </link>
        <updated>2021-01-25T06:56:33.000Z</updated>
        <content type="html"><![CDATA[<p><strong>表单</strong><br>
用于搜集不同类型的用户数据<br>
表单就是一个包含表单元素的区域&lt; form&gt;表单元素N个&lt;/ form &gt;<br>
表单元素是允许用户在表单中（比如文本域，下拉列表，单选框，复选框等）<br>
输入信息的元素，以及文本标签<br>
表单使用表单标签定义&lt; from&gt;<br>
<strong>表单标签</strong><br>
&lt; form&gt;&lt; /form&gt;表单的最外层包裹元素（非必须）<br>
常用属性<br>
action=&quot;url&quot;规定表单发送数据的路径<br>
autocomplete=on/off 是否应该启用自动完成功能<br>
method=post/get 属性规定如何发送表单数据（表单数据发送到action属性所规定的页面）<br>
target=&quot;_blank&quot;属性规定在何处打开action URL<br>
<strong>input标签</strong><br>
&lt; input&gt;标签用于搜索用户信息。根据不同的type属性值，输入字段拥有很多种形式。输入字段可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等。<br>
常用属性：<br>
type 规定input元素的类型<br>
value 规定元素的初始值<br>
placeholder 规定帮助用户填写输入字段的提示<br>
checked 规定元素是否为 选中状态<br>
multiple 规定输入字段最多可以选择几个值<br>
name 定义input元素的名称<br>
readonly  规定输入字段为只读<br>
text 文本域<br>
password  密码框<br>
button 以按钮的形式显示<br>
checkbox 复选框的形式显示<br>
radio  单选框<br>
file 传递文件<br>
hidden 隐藏文本域<br>
reset 重置按钮<br>
submit 提交按钮<br>
<strong>label标签</strong><br>
&lt; label&gt;标签不会向用户呈现任何效果。不过，它为鼠标用户改进了可用性。如果在label元素内点击 文本，就会触发此控件标签的for属性应当与相关元素的id属性相同<br>
&lt; input id=&quot;conn&quot; type=&quot;text&quot;&gt;<br>
&lt; label for=&quot;conn&quot;&gt;关联表单元素&lt; /label&gt;<br>
<strong>select标签</strong><br>
select元素可创建单选或多选菜单<br>
select元素中的&lt; option&gt;标签用于定义列表中的可用选项<br>
属性：<br>
autofocus 规定在页面加载后文本区域自动获得焦点<br>
disabled 规定禁用该下拉列表<br>
form  （值：form_id）规定文本区域所属的一个或多个表单<br>
multiple  规定可选择多个选项<br>
name  规定下拉列表的名称<br>
required 规定文本区域是必填的<br>
size（值：number） 规定下拉列表中可见选项的数目<br>
<strong>textarea标签</strong><br>
&lt; textrea&gt;标签定义多行的文本输入控件<br>
属性：autofocus disabled form name required readonly<br>
cols(值:number) 规定文本区内的可见宽度<br>
rows(值:number) 规定文本区内的可见行数<br>
maxlength (值:number) 规定文本区域的最大字符数<br>
placeholder 规定描述文本区域预期值的简短提示<br>
wrap(值:hard soft)规定当在表单中提交时，文本区域中的文本如何换行<br>
<strong>表格</strong><br>
表格由&lt; table&gt;标签来定义<br>
每个表格均有若干行(tr)，每行被分为若干单元格(td)<br>
表格的表头使用&lt; th&gt;标签定义<br>
<em>属性</em>：<br>
border：单元格边框<br>
cellpadding：单元格边距<br>
cellspacing：单元格间距<br>
align：表格显示方式<br>
width：表格宽度<br>
<strong>表格标签</strong><br>
&lt; thead&gt;定义表格的表头。用于组合HTML表格的表头内容<br>
&lt; thead&gt;定义表格主体。用于组合HTML表格主体内容<br>
&lt; tfoot&gt;定义表格的页脚。用于组合HTML表格的表注内容<br>
tfoot元素应该与thead和tbody元素结合起来使用<br>
&lt; tr&gt;标签定义表格中的行。tr元素包含一个或多个th或td元素。<br>
&lt; td&gt;定义HTML表格的标准单元格<br>
HTML表格有两类单元格：<br>
表头单元-包含头部信息（由th元素创建）<br>
标准单元-包含数据（由td元素创建）<br>
td元素中的文本一般显示为正常字体且左对齐<br>
打通单元格<br>
&lt; td rowspan=&quot;2&quot;&gt;&lt; /td&gt;打通行<br>
&lt; td colspan=&quot;2&quot;&gt;&lt; /td&gt;打通列</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML基础]]></title>
        <id>https://Charon0327.github.io/post/html-ji-chu/</id>
        <link href="https://Charon0327.github.io/post/html-ji-chu/">
        </link>
        <updated>2021-01-25T04:31:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="html基本结构">HTML基本结构</h2>
<p>&lt;!doctype html&gt;文档声明，此类为H5文档声明<br>
&lt; meta&gt;包含了页面的隐式信息<br>
某些元素具有空内容，空元素在开始标签内进行关闭。</p>
<h2 id="html属性">HTML属性</h2>
<p>属性总是在HTML元素的开始标签中设置<br>
属性总是以名称/值对的形式出现<br>
始终属性值加引号<br>
常用属性：id   class title  style href src align</p>
<h2 id="文本标签">文本标签</h2>
<p>h1-h6标签可定义标题。h1最大，h6最小<br>
p标签定义段落<br>
b标签规定粗体文本<br>
u标签为文本添加下划线<br>
s标签克定义加删除线文本定义<br>
br可插入一个简单的换行符<br>
hr&gt;标签在HTML页面中创建一条水平线<br>
i标签规定斜体文本</p>
<h2 id="列表标签">列表标签</h2>
<p>ol定义有序列表，常用属性：start规定列表起始位置<br>
ul定义无序列表<br>
li定义列表项目<br>
dl定义了定义列表，用于结合<dt><br>
dt定义了定义列表中的项目<br>
dd在定义列表中定义条目的定义部分</p>
<h3 id="快捷方式">快捷方式</h3>
<p>ol&gt;li{列表$}*4</p>
<h2 id="超级链接">超级链接</h2>
<p>a来设置超文本链接<br>
鼠标移动到链接上，鼠标默认会变为一只小手，链接文本默认带有下划线<br>
herf属性指定跳转地址 href=&quot;&quot;<br>
target属性固打开方式 target='_blank'（新窗口下打开）<br>
支持相对路径与绝对路径的跳转</p>
<h2 id="链接跳转">链接跳转</h2>
<p>相对路径：相对于当前文档路径进行跳转<br>
绝对路径：从盘符开始的路径<br>
往上一级查找方式../文件夹/文件名<br>
同级查找方式：文件夹/文件名<br>
本地锚点跳转：&lt; a href=&quot;#id值&quot;&gt; &lt; p id=&quot;值&quot;&gt;&lt; /p&gt;</p>
<h2 id="图片标签">图片标签</h2>
<p>&lt; img src=&quot;地址&quot;&gt; 通过此标签，可向页面内引入图片<br>
src属性为文件的路径，alt属性为图片由于某种原因无法展示的时候显示的信息</p>
]]></content>
    </entry>
</feed>